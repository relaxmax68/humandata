<?php

namespace BigButtonBundle\Repository;

use AccueilBundle\Entity\User;

/**
 * TapRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TapRepository extends \Doctrine\ORM\EntityRepository
{
	public function myFindAll(){

		return $this
		    ->createQueryBuilder('t')
		    ->getQuery()
		    ->getResult();
	}
	public function myFindUserOnDuration( $user, $start, $end ){

		$qb = $this->createQueryBuilder('t');

		$qb
			->where('t.user = :user')
			->setParameter('user',$user->getId())

			->andWhere('t.date BETWEEN :start AND :end')
			->setParameter('start', $start)
	    ->setParameter('end',   $end);

		return $qb
		    ->getQuery()
		    ->getResult();
	}
	public function myFindOne( $id ){

		$qb = $this->createQueryBuilder('t');

		$qb
			->where( 't.id = :id' )
			->setParameter('id', $id );

		return $qb
		    ->getQuery()
		    ->getResult();
	}
	public function activeAll(){

		$qb = $this->createQueryBuilder('t');

	    $qb
            ->where('t.task = true');

		return $qb
		    ->getQuery()
		    ->getResult();
	}
	public function lastUserIdTap( $user ){

		$qb = $this->createQueryBuilder('t');

		$qb->select("max(t.id)")
		   ->where('t.user = :user')
		   ->setParameter('user',$user->getId());

		return $qb
		    ->getQuery()
		    ->getOneOrNullResult();
	}
	public function notSaved( $user){

			$qb = $this->createQueryBuilder('t');

			$qb
				->where('t.user = :user')
				->setParameter('user',$user->getId())

				->andWhere('t.saved = :saved')
				->setParameter('saved', false);

			return $qb
			    ->getQuery()
			    ->getResult();
	}
	public function idBeforeLastUserTapSaved( $idUser, $lastid ){

		$qb = $this->createQueryBuilder('t');

		$qb->select("max(t.id)")

			 ->andWhere('t.user = :user')
			 ->setParameter('user',$idUser)

			 ->andWhere('t.saved = :saved')
			 ->setParameter('saved', true);

		return $qb
				->getQuery()
				->getOneOrNullResult();
	}
}
